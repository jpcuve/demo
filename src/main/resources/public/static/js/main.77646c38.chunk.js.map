{"version":3,"sources":["page/Outline.tsx","page/HomePage.tsx","App.tsx","serviceWorker.ts","remote.tsx","index.tsx","domain.tsx"],"names":["Outline","props","React","useState","JSON","stringify","user","style","color","errors","map","error","key","fetching","children","HomePage","count","useSelector","state","counter","dispatch","useDispatch","console","debug","onClick","type","App","exact","path","component","render","Boolean","window","location","hostname","match","BASE_URL","port","protocol","host","client","rpc","endPoint","a","method","contentType","body","options","headers","fetch","res","json","get","this","post","data","postForm","form","undefined","put","delete","defaultApplicationState","id","email","roles","super","then","log","store","createStore","action","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"kRAmCeA,EAzBkB,SAAAC,GAAU,IAAD,EACRC,IAAMC,SAA6B,MAD3B,6BAMxC,OACE,6BACE,sCAAYC,KAAKC,UAAUJ,EAAMK,OACjC,qCACA,6BACE,wBAAIC,MAAO,CAAEC,MAAO,QACfP,EAAMQ,OAAOC,KAAI,SAAAC,GAChB,OACE,wBAAIC,IAAKD,GAAQA,OAItBV,EAAMY,UAAY,6CACpBZ,EAAMa,Y,QCNAC,EAhBuB,SAAAd,GAAU,IAAD,EACXC,IAAMC,UAAkB,GADb,mBACpCU,EADoC,aAEfX,IAAMC,SAAmB,KAFV,mBAEpCM,EAFoC,KAGrCO,GAHqC,KAG7BC,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,YAC7Db,EAAOW,aAAoC,SAAAC,GAAK,OAAIA,EAAMZ,QAC1Dc,EAAWC,cAEjB,OADAC,QAAQC,MAAR,iBAAwBP,IAEpB,kBAAC,EAAD,eAASV,KAAMA,EAAMO,SAAUA,EAAUJ,OAAQA,GAAYR,GACzD,6CACA,uCAAae,GACb,4BAAQQ,QAAS,kBAAMJ,EAAS,CAACK,KAAM,wBAAvC,eCDGC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOe,OAAQ,kBAAO,+CCCVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBAC,EAAoC,SAAzBJ,OAAOC,SAASI,KAAkB,wBAAlC,UAA+DL,OAAOC,SAASK,SAA/E,aAA4FN,OAAOC,SAASM,MAC7HjB,QAAQC,MAAR,4BAAmCa,IAEnC,IAyCeI,EAzCK,CAClBC,IAAI,WAAD,4BAAE,WAAgBC,GAAhB,qCAAAC,EAAA,6DAAkCC,EAAlC,+BAAmD,MAAOC,EAA1D,+BAAgF,GAAIC,EAApF,+BAAuG,KACpGC,EAAe,CACnBH,SACAI,QAAS,CACP,OAAU,qBAIVF,IACED,IACFE,EAAQC,QAAQ,gBAAkBH,GAEpCE,EAAQD,KAAOA,GAEjBxB,QAAQC,MAAMnB,KAAKC,UAAU0C,IAd1B,SAeeE,MAAM,GAAD,OAAIb,GAAJ,OAAeM,GAAYK,GAf/C,cAeGG,EAfH,iBAgBgBA,EAAIC,OAhBpB,WAgBGA,EAhBH,OAiBH7B,QAAQC,MAAMnB,KAAKC,UAAU8C,MACzB,UAAWA,GAlBZ,uBAmBKA,EAAKxC,MAnBV,iCAqBIwC,GArBJ,4CAAF,mDAAC,GAuBJC,IAAI,WAAD,4BAAE,WAAeV,GAAf,SAAAC,EAAA,sEACUU,KAAKZ,IAAIC,GADnB,wFAAF,mDAAC,GAGJY,KAAK,WAAD,4BAAE,WAAeZ,EAAkBa,GAAjC,SAAAZ,EAAA,sEACSU,KAAKZ,IAAIC,EAAU,OAAQ,mBAAoBtC,KAAKC,UAAUkD,IADvE,wFAAF,qDAAC,GAGLC,SAAS,WAAD,4BAAE,WAAed,EAAkBe,GAAjC,SAAAd,EAAA,sEACKU,KAAKZ,IAAIC,EAAU,YAAQgB,EAAWD,GAD3C,wFAAF,qDAAC,GAGTE,IAAI,WAAD,4BAAE,WAAejB,EAAkBa,GAAjC,SAAAZ,EAAA,sEACUU,KAAKZ,IAAIC,EAAU,MAAO,mBAAoBtC,KAAKC,UAAUkD,IADvE,wFAAF,qDAAC,GAGJK,OAAO,WAAD,4BAAE,WAAelB,GAAf,SAAAC,EAAA,sEACOU,KAAKZ,IAAIC,EAAU,UAD1B,wFAAF,mDAAC,I,QCrBHmB,EAA4C,CAChD1C,QAAS,EACTb,KCb+B,CAC7BwD,GAAI,EACJC,MAAO,GACPC,MAAO,GACPC,OAAO,IDYXzB,EAAOY,IAAI,+BAA+Bc,MAAK,SAAChB,GAAD,OAAc5B,QAAQ6C,IAAI/D,KAAKC,UAAU6C,OACxF,IAQMkB,EAAQC,aAR4C,WAA8C,IAA7CnD,EAA4C,uDAApC2C,EAAyBS,EAAW,uCAErG,OADAhD,QAAQ6C,IAAR,yCAA8C/D,KAAKC,UAAUa,GAA7D,oBAA+Ed,KAAKC,UAAUiE,KACvFA,EAAO7C,MACZ,IAAK,oBACH,OAAO,2BAAIP,GAAX,IAAkBC,QAASD,EAAMC,QAAU,IAE/C,OAAOD,KAGTqD,IAASzC,OACP,kBAAC,IAAM0C,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SFoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBX,MAAK,SAAAY,GACJA,EAAaC,gBAEdC,OAAM,SAAArE,GACLW,QAAQX,MAAMA,EAAMsE,c","file":"static/js/main.77646c38.chunk.js","sourcesContent":["import React from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { User } from '../domain'\r\n\r\ninterface Props extends RouteComponentProps {\r\n  fetching: boolean,\r\n  errors: string[],\r\n  user: User,\r\n}\r\n\r\nconst Outline: React.FC<Props> = props => {\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\r\n  const forward = (url: string) => {\r\n    setAnchorEl(null)\r\n    props.history.push(url)\r\n  }\r\n  return (\r\n    <div>\r\n      <div>User: {JSON.stringify(props.user)}</div>\r\n      <div>Menu</div>\r\n      <div>\r\n        <ul style={{ color: 'red' }}>\r\n            {props.errors.map(error => {\r\n              return (\r\n                <li key={error}>{error}</li>\r\n              );\r\n            })}\r\n          </ul>\r\n          {props.fetching && <span>Fetching...</span>}\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Outline","import React from 'react'\r\nimport Outline from './Outline'\r\nimport { PageProps, ApplicationState } from '..'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { User } from '../domain'\r\n\r\n\r\nconst HomePage: React.FC<PageProps> = props => {\r\n    const [fetching, setFetching] = React.useState<boolean>(false)\r\n    const [errors, setErrors] = React.useState<string[]>([])\r\n    const count = useSelector<ApplicationState, number>(state => state.counter)\r\n    const user = useSelector<ApplicationState, User>(state => state.user)\r\n    const dispatch = useDispatch()\r\n    console.debug(`Count: ${count}`)\r\n    return (\r\n        <Outline user={user} fetching={fetching} errors={errors} {...props}>\r\n            <div>Home page...</div>\r\n            <div>Count: {count}</div>\r\n            <button onClick={() => dispatch({type: 'increment-counter'})}>Increment</button>\r\n        </Outline>\r\n    );\r\n}\r\n\r\nexport default HomePage","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport HomePage from './page/HomePage';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route render={() => (<div>No match</div>)} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const BASE_URL = window.location.port === '3000' ? 'http://localhost:8080' : `${window.location.protocol}//${window.location.host}`\r\nconsole.debug(`Base URL for RPC: ${BASE_URL}`)\r\n\r\nconst client: any = {\r\n  rpc: async function (endPoint: string, method: string = 'GET', contentType: string = '', body: any | null = null ): Promise<any> {\r\n    const options: any = {\r\n      method,\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      },\r\n      // credentials: 'include',\r\n    };\r\n    if (body){\r\n      if (contentType){\r\n        options.headers['Content-Type'] = contentType\r\n      }\r\n      options.body = body;\r\n    }\r\n    console.debug(JSON.stringify(options))\r\n    const res = await fetch(`${BASE_URL}${endPoint}`, options)\r\n    const json = await res.json()\r\n    console.debug(JSON.stringify(json))\r\n    if ('error' in json) {\r\n      throw json.error;\r\n    }\r\n    return json;\r\n  },\r\n  get: async function(endPoint: string): Promise<any> { \r\n    return await this.rpc(endPoint)\r\n  } ,\r\n  post: async function(endPoint: string, data: any): Promise<any> { \r\n    return await this.rpc(endPoint, 'POST', 'application/json', JSON.stringify(data))\r\n  },\r\n  postForm: async function(endPoint: string, form: FormData): Promise<any> { \r\n    return await this.rpc(endPoint, 'POST', undefined, form)\r\n  },  // contentType: undefined so boundary is correctly set\r\n  put: async function(endPoint: string, data: any): Promise<any> { \r\n    return await this.rpc(endPoint, 'PUT', 'application/json', JSON.stringify(data))\r\n  },\r\n  delete: async function(endPoint: string): Promise<any> { \r\n    return await this.rpc(endPoint, 'DELETE')\r\n  }\r\n}\r\n\r\nexport default client\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { RouteComponentProps } from 'react-router';\nimport client from './remote';\nimport { createStore, Reducer, Action, combineReducers, AnyAction } from 'redux';\nimport { Provider } from 'react-redux';\nimport { User, defaultUser } from './domain';\n\nexport interface PageProps extends RouteComponentProps {}\n\nexport interface ApplicationState {\n  counter: number,\n  user: User,\n}\n\nconst defaultApplicationState: ApplicationState = {\n  counter: 0,\n  user: defaultUser,\n}\n\nclient.get('/master/all-currency-groups').then((res: any) => console.log(JSON.stringify(res)))\nconst rootReducer: Reducer<ApplicationState, AnyAction> = (state = defaultApplicationState, action) => {\n  console.log(`User reducer is called, state: ${JSON.stringify(state)} action: ${JSON.stringify(action)}`)\n  switch(action.type){\n    case 'increment-counter':\n      return {...state, counter: state.counter + 1}\n  }\n  return state\n}\nconst store = createStore(rootReducer)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export interface User {\r\n    id: number,\r\n    email: string,\r\n    roles: string[],\r\n    super: boolean\r\n}\r\n\r\nexport const defaultUser: User = {\r\n    id: 0,\r\n    email: '',\r\n    roles: [],\r\n    super: false,\r\n}\r\n"],"sourceRoot":""}